/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // use hibernate to persist (java) domain entities for us, aka JPA implementation
    implementation 'org.hibernate:hibernate-core:5.6.5.Final'

    // Sqlite as persistent DB (SENG301 lab 3)
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'com.zsoltfabok:sqlite-dialect:1.0'

    // use a in-memory database to store entities (can be substituted with any database)
    implementation 'com.h2database:h2:2.1.210'

    //Cucumber dependencies
    testImplementation 'io.cucumber:cucumber-java:7.2.3'

    //Mocking (lab 5)
    implementation 'org.mockito:mockito-core:4.3.1'
    testImplementation 'org.mockito:mockito-inline:2.13.0'

    // Logging facility (SENG301 lecture 9 and lab 5)
    implementation 'org.apache.logging.log4j:log4j-core:2.17.0'

    // JSON deserialisation (for external REST API, lab 5)
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.2'
}

run {
    // this is needed if you want to start your main class with gradle run
    // you may pass the --console=PLAIN option to disable the green progress bar
    // e.g., gradlew run --console=PLAIN
    standardInput = System.in
}

application {
    // Define the main class for the application.
    mainClass = 'uc.seng301.wordleapp.assignment5.App'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

sourceSets {
    test {
        resources.srcDirs = ['src/test/resources']
        java.srcDirs = ['src/test/java', 'src/main/java']
        runtimeClasspath = project.sourceSets.main.compileClasspath +
                project.sourceSets.test.runtimeClasspath +
                project.sourceSets.test.compileClasspath +
                fileTree("src/test/resources/test") +
                project.sourceSets.test.output + project.sourceSets.main.output
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime  + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    // force the test task to run Cucumber too
    finalizedBy cucumber
}
